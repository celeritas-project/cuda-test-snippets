
Fatbin elf code:
================
arch = sm_35
code version = [1,7]
producer = <unknown>
host = linux
compile_size = 64bit

Fatbin ptx code:
================
arch = sm_35
code version = [6,5]
producer = <unknown>
host = linux
compile_size = 64bit
compressed








.version 6.5
.target sm_35
.address_size 64



.visible .entry _Z7cu_cbrtPd(
.param .u64 _Z7cu_cbrtPd_param_0
)
{
.reg .pred %p<5>;
.reg .f32 %f<7>;
.reg .b32 %r<34>;
.reg .f64 %fd<24>;
.reg .b64 %rd<5>;


ld.param.u64 %rd2, [_Z7cu_cbrtPd_param_0];
cvta.to.global.u64 %rd3, %rd2;
mov.u32 %r12, %tid.x;
mul.wide.u32 %rd4, %r12, 8;
add.s64 %rd1, %rd3, %rd4;
ld.global.f64 %fd1, [%rd1];
{
.reg .b32 %temp; 
mov.b64 {%r30, %temp}, %fd1;
}
{
.reg .b32 %temp; 
mov.b64 {%temp, %r2}, %fd1;
}
and.b32 %r31, %r2, 2147483647;
setp.neu.f64	%p1, %fd1, 0d0000000000000000;
setp.lt.u32	%p2, %r31, 2146435072;
and.pred %p3, %p1, %p2;
@%p3 bra BB0_2;
bra.uni BB0_1;

BB0_2:
shr.u32 %r32, %r31, 20;
mov.u32 %r33, 0;
setp.ne.s32	%p4, %r32, 0;
@%p4 bra BB0_4;

mov.b64 %fd5, {%r30, %r31};
mul.f64 %fd6, %fd5, 0d4350000000000000;
{
.reg .b32 %temp; 
mov.b64 {%r30, %temp}, %fd6;
}
{
.reg .b32 %temp; 
mov.b64 {%temp, %r31}, %fd6;
}
shr.u32 %r32, %r31, 20;
mov.u32 %r33, 18;

BB0_4:
add.s32 %r15, %r32, -1022;
cvt.rn.f32.s32	%f1, %r15;
mul.ftz.f32 %f2, %f1, 0f3EAAAAAB;
cvt.rni.ftz.s32.f32	%r16, %f2;
mad.lo.s32 %r17, %r16, -3145728, %r31;
mov.b64 %fd7, {%r30, %r17};
cvt.rn.ftz.f32.f64	%f3, %fd7;
lg2.approx.ftz.f32 %f4, %f3;
mul.ftz.f32 %f5, %f4, 0f3EAAAAAB;
ex2.approx.ftz.f32 %f6, %f5;
cvt.ftz.f64.f32	%fd8, %f6;
mul.f64 %fd9, %fd8, %fd8;
{
.reg .b32 %temp; 
mov.b64 {%r18, %temp}, %fd9;
}
{
.reg .b32 %temp; 
mov.b64 {%temp, %r19}, %fd9;
}
add.s32 %r20, %r19, 1048576;
mov.b64 %fd10, {%r18, %r20};
fma.rn.f64 %fd11, %fd10, %fd8, %fd7;
rcp.approx.ftz.f64 %fd12, %fd11;
neg.f64 %fd13, %fd11;
mov.f64 %fd14, 0d3FF0000000000000;
fma.rn.f64 %fd15, %fd13, %fd12, %fd14;
fma.rn.f64 %fd16, %fd15, %fd15, %fd15;
fma.rn.f64 %fd17, %fd16, %fd12, %fd12;
neg.f64 %fd18, %fd8;
fma.rn.f64 %fd19, %fd9, %fd18, %fd7;
mul.f64 %fd20, %fd17, %fd19;
fma.rn.f64 %fd21, %fd8, %fd20, %fd8;
{
.reg .b32 %temp; 
mov.b64 {%r21, %temp}, %fd21;
}
{
.reg .b32 %temp; 
mov.b64 {%temp, %r22}, %fd21;
}
sub.s32 %r23, %r16, %r33;
shl.b32 %r24, %r23, 20;
add.s32 %r25, %r22, %r24;
mov.b64 %fd22, {%r21, %r25};
{
.reg .b32 %temp; 
mov.b64 {%r26, %temp}, %fd22;
}
{
.reg .b32 %temp; 
mov.b64 {%temp, %r27}, %fd22;
}
and.b32 %r28, %r2, -2147483648;
or.b32 %r29, %r27, %r28;
mov.b64 %fd23, {%r26, %r29};
bra.uni BB0_5;

BB0_1:
add.f64 %fd23, %fd1, %fd1;

BB0_5:
st.global.f64 [%rd1], %fd23;
ret;
}


