
Fatbin elf code:
================
arch = sm_70
code version = [1,7]
producer = <unknown>
host = linux
compile_size = 64bit

Fatbin ptx code:
================
arch = sm_70
code version = [6,5]
producer = <unknown>
host = linux
compile_size = 64bit
compressed








.version 6.5
.target sm_70
.address_size 64


.func (.param .b64 func_retval0) __internal_accurate_pow
(
.param .b64 __internal_accurate_pow_param_0
)
;

.visible .entry _Z11my_copysignPd(
.param .u64 _Z11my_copysignPd_param_0
)
{
.reg .pred %p<16>;
.reg .b32 %r<23>;
.reg .f64 %fd<21>;
.reg .b64 %rd<5>;


ld.param.u64 %rd1, [_Z11my_copysignPd_param_0];
mov.u32 %r1, %tid.x;
cvt.rn.f64.s32	%fd1, %r1;
{
.reg .b32 %temp; 
mov.b64 {%temp, %r2}, %fd1;
}
bfe.u32 %r4, %r2, 20, 11;
add.s32 %r5, %r4, -1012;
mov.b64 %rd2, %fd1;
shl.b64 %rd3, %rd2, %r5;
setp.ne.s64	%p2, %rd3, -9223372036854775808;
setp.eq.s64	%p3, %rd3, -9223372036854775808;

	{
.reg .b32 temp_param_reg;

	.param .b64 param0;
st.param.f64	[param0+0], %fd1;
.param .b64 retval0;
call.uni (retval0), 
__internal_accurate_pow, 
(
param0
);
ld.param.f64	%fd6, [retval0+0];


	}
	mov.f64 %fd11, 0dBFF0000000000000;
{
.reg .b32 %temp; 
mov.b64 {%temp, %r3}, %fd11;
}
setp.gt.s32	%p4, %r3, -1;
setp.lt.s32	%p5, %r3, 0;
and.pred %p1, %p5, %p3;
or.pred %p6, %p4, %p2;
@%p6 bra BB0_2;

{
.reg .b32 %temp; 
mov.b64 {%temp, %r6}, %fd6;
}
xor.b32 %r7, %r6, -2147483648;
{
.reg .b32 %temp; 
mov.b64 {%r8, %temp}, %fd6;
}
mov.b64 %fd6, {%r8, %r7};

BB0_2:
@%p4 bra BB0_4;

cvt.rzi.f64.f64	%fd12, %fd1;
setp.neu.f64	%p8, %fd12, %fd1;
selp.f64	%fd6, 0dFFF8000000000000, %fd6, %p8;

BB0_4:
add.f64 %fd20, %fd1, 0dBFF0000000000000;
{
.reg .b32 %temp; 
mov.b64 {%temp, %r9}, %fd20;
}
and.b32 %r10, %r9, 2146435072;
setp.ne.s32	%p9, %r10, 2146435072;
@%p9 bra BB0_5;

abs.f64 %fd13, %fd1;
setp.gtu.f64	%p10, %fd13, 0d7FF0000000000000;
@%p10 bra BB0_14;

and.b32 %r11, %r2, 2147483647;
setp.ne.s32	%p11, %r11, 2146435072;
@%p11 bra BB0_9;

{
.reg .b32 %temp; 
mov.b64 {%r12, %temp}, %fd1;
}
setp.eq.s32	%p12, %r12, 0;
@%p12 bra BB0_13;

BB0_9:
and.b32 %r13, %r3, 2147483647;
setp.ne.s32	%p13, %r13, 2146435072;
@%p13 bra BB0_10;

{
.reg .b32 %temp; 
mov.b64 {%r14, %temp}, %fd11;
}
setp.ne.s32	%p14, %r14, 0;
mov.f64 %fd20, %fd6;
@%p14 bra BB0_14;

shr.s32 %r15, %r2, 31;
and.b32 %r16, %r15, -2146435072;
add.s32 %r17, %r16, 2146435072;
or.b32 %r18, %r17, -2147483648;
selp.b32	%r19, %r18, %r17, %p1;
mov.u32 %r20, 0;
mov.b64 %fd20, {%r20, %r19};
bra.uni BB0_14;

BB0_5:
mov.f64 %fd20, %fd6;
bra.uni BB0_14;

BB0_10:
mov.f64 %fd20, %fd6;
bra.uni BB0_14;

BB0_13:
mov.u32 %r21, 1072693248;
mov.u32 %r22, 0;
mov.b64 %fd20, {%r22, %r21};

BB0_14:
setp.eq.s32	%p15, %r1, 0;
selp.f64	%fd15, 0d3FF0000000000000, %fd20, %p15;
cvta.to.global.u64 %rd4, %rd1;
ld.global.f64 %fd16, [%rd4];
mul.f64 %fd17, %fd15, %fd16;
st.global.f64 [%rd4], %fd17;
ret;
}

.func (.param .b64 func_retval0) __internal_accurate_pow(
.param .b64 __internal_accurate_pow_param_0
)
{
.reg .pred %p<9>;
.reg .f32 %f<3>;
.reg .b32 %r<53>;
.reg .f64 %fd<138>;


ld.param.f64 %fd12, [__internal_accurate_pow_param_0];
mov.f64 %fd13, 0d3FF0000000000000;
{
.reg .b32 %temp; 
mov.b64 {%temp, %r50}, %fd13;
}
{
.reg .b32 %temp; 
mov.b64 {%r49, %temp}, %fd13;
}
shr.u32 %r51, %r50, 20;
setp.ne.s32	%p1, %r51, 0;
@%p1 bra BB1_2;

mov.f64 %fd14, 0d4350000000000000;
{
.reg .b32 %temp; 
mov.b64 {%temp, %r50}, %fd14;
}
{
.reg .b32 %temp; 
mov.b64 {%r49, %temp}, %fd14;
}
shr.u32 %r16, %r50, 20;
add.s32 %r51, %r16, -54;

BB1_2:
add.s32 %r52, %r51, -1023;
and.b32 %r17, %r50, -2146435073;
or.b32 %r18, %r17, 1072693248;
mov.b64 %fd135, {%r49, %r18};
setp.lt.u32	%p2, %r18, 1073127583;
@%p2 bra BB1_4;

{
.reg .b32 %temp; 
mov.b64 {%r19, %temp}, %fd135;
}
{
.reg .b32 %temp; 
mov.b64 {%temp, %r20}, %fd135;
}
add.s32 %r21, %r20, -1048576;
mov.b64 %fd135, {%r19, %r21};
add.s32 %r52, %r51, -1022;

BB1_4:
add.f64 %fd15, %fd135, 0d3FF0000000000000;
rcp.approx.ftz.f64 %fd16, %fd15;
neg.f64 %fd17, %fd15;
fma.rn.f64 %fd19, %fd17, %fd16, %fd13;
fma.rn.f64 %fd20, %fd19, %fd19, %fd19;
fma.rn.f64 %fd21, %fd20, %fd16, %fd16;
add.f64 %fd22, %fd135, 0dBFF0000000000000;
mul.f64 %fd23, %fd22, %fd21;
fma.rn.f64 %fd24, %fd22, %fd21, %fd23;
mul.f64 %fd25, %fd24, %fd24;
mov.f64 %fd26, 0d3ED0F5D241AD3B5A;
mov.f64 %fd27, 0d3EB0F5FF7D2CAFE2;
fma.rn.f64 %fd28, %fd27, %fd25, %fd26;
mov.f64 %fd29, 0d3EF3B20A75488A3F;
fma.rn.f64 %fd30, %fd28, %fd25, %fd29;
mov.f64 %fd31, 0d3F1745CDE4FAECD5;
fma.rn.f64 %fd32, %fd30, %fd25, %fd31;
mov.f64 %fd33, 0d3F3C71C7258A578B;
fma.rn.f64 %fd34, %fd32, %fd25, %fd33;
mov.f64 %fd35, 0d3F6249249242B910;
fma.rn.f64 %fd36, %fd34, %fd25, %fd35;
mov.f64 %fd37, 0d3F89999999999DFB;
fma.rn.f64 %fd38, %fd36, %fd25, %fd37;
sub.f64 %fd39, %fd22, %fd24;
add.f64 %fd40, %fd39, %fd39;
neg.f64 %fd41, %fd24;
fma.rn.f64 %fd42, %fd41, %fd22, %fd40;
mul.f64 %fd43, %fd21, %fd42;
fma.rn.f64 %fd44, %fd25, %fd38, 0d3FB5555555555555;
mov.f64 %fd45, 0d3FB5555555555555;
sub.f64 %fd46, %fd45, %fd44;
fma.rn.f64 %fd47, %fd25, %fd38, %fd46;
add.f64 %fd48, %fd47, 0d0000000000000000;
add.f64 %fd49, %fd48, 0dBC46A4CB00B9E7B0;
add.f64 %fd50, %fd44, %fd49;
sub.f64 %fd51, %fd44, %fd50;
add.f64 %fd52, %fd49, %fd51;
mul.rn.f64 %fd53, %fd24, %fd24;
neg.f64 %fd54, %fd53;
fma.rn.f64 %fd55, %fd24, %fd24, %fd54;
{
.reg .b32 %temp; 
mov.b64 {%r22, %temp}, %fd43;
}
{
.reg .b32 %temp; 
mov.b64 {%temp, %r23}, %fd43;
}
add.s32 %r24, %r23, 1048576;
mov.b64 %fd56, {%r22, %r24};
fma.rn.f64 %fd57, %fd24, %fd56, %fd55;
mul.rn.f64 %fd58, %fd53, %fd24;
neg.f64 %fd59, %fd58;
fma.rn.f64 %fd60, %fd53, %fd24, %fd59;
fma.rn.f64 %fd61, %fd53, %fd43, %fd60;
fma.rn.f64 %fd62, %fd57, %fd24, %fd61;
mul.rn.f64 %fd63, %fd50, %fd58;
neg.f64 %fd64, %fd63;
fma.rn.f64 %fd65, %fd50, %fd58, %fd64;
fma.rn.f64 %fd66, %fd50, %fd62, %fd65;
fma.rn.f64 %fd67, %fd52, %fd58, %fd66;
add.f64 %fd68, %fd63, %fd67;
sub.f64 %fd69, %fd63, %fd68;
add.f64 %fd70, %fd67, %fd69;
add.f64 %fd71, %fd24, %fd68;
sub.f64 %fd72, %fd24, %fd71;
add.f64 %fd73, %fd68, %fd72;
add.f64 %fd74, %fd70, %fd73;
add.f64 %fd75, %fd43, %fd74;
add.f64 %fd76, %fd71, %fd75;
sub.f64 %fd77, %fd71, %fd76;
add.f64 %fd78, %fd75, %fd77;
xor.b32 %r25, %r52, -2147483648;
mov.u32 %r26, -2147483648;
mov.u32 %r27, 1127219200;
mov.b64 %fd79, {%r25, %r27};
mov.b64 %fd80, {%r26, %r27};
sub.f64 %fd81, %fd79, %fd80;
mov.f64 %fd82, 0d3FE62E42FEFA39EF;
fma.rn.f64 %fd83, %fd81, %fd82, %fd76;
neg.f64 %fd84, %fd81;
fma.rn.f64 %fd85, %fd84, %fd82, %fd83;
sub.f64 %fd86, %fd85, %fd76;
sub.f64 %fd87, %fd78, %fd86;
mov.f64 %fd88, 0d3C7ABC9E3B39803F;
fma.rn.f64 %fd89, %fd81, %fd88, %fd87;
add.f64 %fd90, %fd83, %fd89;
sub.f64 %fd91, %fd83, %fd90;
add.f64 %fd92, %fd89, %fd91;
{
.reg .b32 %temp; 
mov.b64 {%temp, %r28}, %fd12;
}
add.s32 %r29, %r28, %r28;
setp.gt.u32	%p3, %r29, -33554433;
and.b32 %r30, %r28, -15728641;
selp.b32	%r31, %r30, %r28, %p3;
{
.reg .b32 %temp; 
mov.b64 {%r32, %temp}, %fd12;
}
mov.b64 %fd93, {%r32, %r31};
mul.rn.f64 %fd94, %fd90, %fd93;
neg.f64 %fd95, %fd94;
fma.rn.f64 %fd96, %fd90, %fd93, %fd95;
fma.rn.f64 %fd97, %fd92, %fd93, %fd96;
add.f64 %fd4, %fd94, %fd97;
sub.f64 %fd98, %fd94, %fd4;
add.f64 %fd5, %fd97, %fd98;
mov.f64 %fd99, 0d4338000000000000;
mov.f64 %fd100, 0d3FF71547652B82FE;
fma.rn.f64 %fd101, %fd4, %fd100, %fd99;
{
.reg .b32 %temp; 
mov.b64 {%r13, %temp}, %fd101;
}
mov.f64 %fd102, 0dC338000000000000;
add.rn.f64 %fd103, %fd101, %fd102;
mov.f64 %fd104, 0dBFE62E42FEFA39EF;
fma.rn.f64 %fd105, %fd103, %fd104, %fd4;
mov.f64 %fd106, 0dBC7ABC9E3B39803F;
fma.rn.f64 %fd107, %fd103, %fd106, %fd105;
mov.f64 %fd108, 0d3E928AF3FCA213EA;
mov.f64 %fd109, 0d3E5ADE1569CE2BDF;
fma.rn.f64 %fd110, %fd109, %fd107, %fd108;
mov.f64 %fd111, 0d3EC71DEE62401315;
fma.rn.f64 %fd112, %fd110, %fd107, %fd111;
mov.f64 %fd113, 0d3EFA01997C89EB71;
fma.rn.f64 %fd114, %fd112, %fd107, %fd113;
mov.f64 %fd115, 0d3F2A01A014761F65;
fma.rn.f64 %fd116, %fd114, %fd107, %fd115;
mov.f64 %fd117, 0d3F56C16C1852B7AF;
fma.rn.f64 %fd118, %fd116, %fd107, %fd117;
mov.f64 %fd119, 0d3F81111111122322;
fma.rn.f64 %fd120, %fd118, %fd107, %fd119;
mov.f64 %fd121, 0d3FA55555555502A1;
fma.rn.f64 %fd122, %fd120, %fd107, %fd121;
mov.f64 %fd123, 0d3FC5555555555511;
fma.rn.f64 %fd124, %fd122, %fd107, %fd123;
mov.f64 %fd125, 0d3FE000000000000B;
fma.rn.f64 %fd126, %fd124, %fd107, %fd125;
fma.rn.f64 %fd127, %fd126, %fd107, %fd13;
fma.rn.f64 %fd128, %fd127, %fd107, %fd13;
{
.reg .b32 %temp; 
mov.b64 {%r14, %temp}, %fd128;
}
{
.reg .b32 %temp; 
mov.b64 {%temp, %r15}, %fd128;
}
shl.b32 %r33, %r13, 20;
add.s32 %r34, %r15, %r33;
mov.b64 %fd136, {%r14, %r34};
{
.reg .b32 %temp; 
mov.b64 {%temp, %r35}, %fd4;
}
mov.b32 %f2, %r35;
abs.ftz.f32 %f1, %f2;
setp.lt.ftz.f32	%p4, %f1, 0f4086232B;
@%p4 bra BB1_7;

setp.lt.f64	%p5, %fd4, 0d0000000000000000;
add.f64 %fd129, %fd4, 0d7FF0000000000000;
selp.f64	%fd136, 0d0000000000000000, %fd129, %p5;
setp.geu.ftz.f32	%p6, %f1, 0f40874800;
@%p6 bra BB1_7;

mov.f64 %fd134, 0d4338000000000000;
mov.f64 %fd133, 0d3FF71547652B82FE;
fma.rn.f64 %fd132, %fd4, %fd133, %fd134;
{
.reg .b32 %temp; 
mov.b64 {%r48, %temp}, %fd132;
}
shr.u32 %r36, %r48, 31;
add.s32 %r37, %r48, %r36;
shr.s32 %r38, %r37, 1;
shl.b32 %r39, %r38, 20;
add.s32 %r40, %r39, %r15;
mov.b64 %fd130, {%r14, %r40};
sub.s32 %r41, %r48, %r38;
shl.b32 %r42, %r41, 20;
add.s32 %r43, %r42, 1072693248;
mov.u32 %r44, 0;
mov.b64 %fd131, {%r44, %r43};
mul.f64 %fd136, %fd130, %fd131;

BB1_7:
{
.reg .b32 %temp; 
mov.b64 {%temp, %r45}, %fd136;
}
and.b32 %r46, %r45, 2147483647;
setp.ne.s32	%p7, %r46, 2146435072;
@%p7 bra BB1_9;

{
.reg .b32 %temp; 
mov.b64 {%r47, %temp}, %fd136;
}
setp.eq.s32	%p8, %r47, 0;
@%p8 bra BB1_10;

BB1_9:
fma.rn.f64 %fd136, %fd136, %fd5, %fd136;

BB1_10:
st.param.f64	[func_retval0+0], %fd136;
ret;
}


